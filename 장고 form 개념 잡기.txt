<장고에서 form처리 개념잡기>

1. HTML에서 form의 용도
- 사용자로부터 데이터를 받는 용도. 다수의 데이터도 가능.
- action속성으로 서버의 어떤 url로 보낼지 지정(폼데이터가 도착할 서버의 URL)
- 입력 값에 따라 다양한 type의 위젯을 갖는다. (type속성)
- http 데이터 처리 방식에 따라 get이나 post로 메소드를 지정해줘야 한다.

2. 장고에서 form개념
- 장고는 backend app서버 개발용이기에, 백엔드 처리를 염두해두고 폼처리 기능을 개발한 듯.
- 모델 class를 통해 DB를 처리하는 것처럼, 장고에서는 form class를 통해 form처리관련
  각종 기능을 수행한다(폼이 어떻게 작동하고 어떻게 보이는지를 결정)
 . 통상 form.py파일에 폼 클래스를 생성
 . 폼클래스의 필드(ex charfield)는 html form의 <input>엘리먼트에 맵핑됨. 제출되는 
  데이터 종류에 따라 별도의 타입을 가짐. 폼의 필드는 브라우저에서 html위젯으로 표현됨
 . 폼필드는 default위젯 클래스를 가지고, 경우에 따라 overriding할 수 있다.
- form은 템플릿의 일부이므로 템플릿코드에 포함되어 렌더링 됨.
 . 장고의 렌더링 과정 : 렌더링할 객체를 뷰로 가져오고(ex, DB에서 데이터 추출),
   그 객체를 템플릿 시스템으로 넘겨주고, 템플릿 문법을 처리해서 html 언어로 바꿔주기
 . form도 객체로서 다뤄지므로 위와같은 과정을 겪는데, 폼객체는 데이터가 없는 경우도 
  있다는 점이 다르다(입력하다 틀릴경우 앞의 입력내용은 남아있어야 하니까.). 데이터가 없는 
  폼을 언바운드 폼, 데이터가 있는 폼을 바운드 폼이라 함
 . 참고로 form클래스는 모든 필드의 유효성 검사를 가능하게 해주는 is_valid()메소드를 가짐
  모든 필드가 유효하다면 is_valid는 'True'를 반환하고, 폼데이터를 'cleaned_data속성'에 옮김 

3. 장고에서 form사용하기
 가. 입력받기 원하는 데이터를 form.py파일의 form class로 만들기
 - django.forms의 forms.Form을 상속받아 클래스를 만듦 
 - 받는 정보의 종류에 따라 적합한 필드타입 선택
 나. 만든 form class를 처리할 view 생성 및 템플릿 처리
 - view는 단순히 보여주기를 처리할 뷰와 입력될 데이터를 처리할 뷰 2가지를 담고 있어야함
 . 전자는 단순히 get요청으로 보고 빈상태의 form객체를 템플릿으로 넘겨준다.
   템플릿에서는 {{form}}태그를 사용해서 이를 템플릿에 표현해준다.
 . 후자는 post요청으로 보고, 먼저 리퀘스트에 담긴 데이터로 form 인스턴스를 생성하고(정의된 
  폼 클래스 사용), 이것이 유효한지 검사한 후 맞다면, 데이터를 cleaned_data로 옮겨준 후,
  데이터베이스를 변경하는 등 로직에 따라 추가적인 조치를 마친 뒤,
  최종적으로 새로운 url로 리다이렉트 한다.
 . 위의 과정은 폼 제네릭뷰를 상속받아 간단히 처리할 수도 있다. FormView, CreateView등이
  위와같은 Form의 처리과정을 간단하게 만들어 준다.
다. 전달된 {{form}}구문은 html상 <label>과 <input>엘리먼트 쌍으로 렌더링 된다.
 . {{form.as_table}}은 <tr>태그로 감싸서 렌더링 됨

4. 장고에서 form을 모델과 연관지어 사용하는 방법
- 모델로 만들어놓은 데이터를 변경할 경우(예. 개인정보 변경), ModelForm을 상속받아서
 기존 모델과 연결만 해주면 간단히 끝남. 그러면 form상에 관련 데이터 필드가 주르륵 
 떠오를 것
- form.py를 쓰지않고 바로 맵핑할 수 있는 방법도 존재